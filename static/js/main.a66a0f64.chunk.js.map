{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","status","handleChange","event","value","target","setState","filteredByTitle","todos","props","titleToLowerCase","toLowerCase","filter","item","includes","selectOption","filterBySelect","complete","completed","updatedUserId","this","className","type","onChange","name","map","todo","classNames","checked","readOnly","onClick","userId","id","React","Component","API_URL","getUsers","fetch","then","response","ok","json","Promise","reject","Error","CurrentUser","user","updateUser","a","selectedUserId","prevProps","email","phone","resetUserId","App","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a66a0f64.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  updatedUserId: (id: number) => void,\n}\n\ninterface State {\n  title: string,\n  status: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    title: '',\n    status: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({ title: value });\n  };\n\n  filteredByTitle = () => {\n    const { title } = this.state;\n    const { todos } = this.props;\n\n    const titleToLowerCase = title.toLowerCase();\n\n    return todos.filter(item => (\n      item.title.includes(titleToLowerCase)\n    ));\n  };\n\n  selectOption = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({ status: value });\n  };\n\n  filterBySelect = () => {\n    const { status } = this.state;\n\n    if (status === 'active') {\n      return (\n        this.filteredByTitle().filter(complete => (\n          complete.completed !== true\n        ))\n      );\n    }\n\n    if (status === 'completed') {\n      return (\n        this.filteredByTitle().filter(complete => (\n          complete.completed === true\n        ))\n      );\n    }\n\n    return this.filteredByTitle();\n  };\n\n  render() {\n    const { updatedUserId } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          value={this.state.title}\n          onChange={this.handleChange}\n        />\n\n        <select\n          name=\"status\"\n          value={this.state.status}\n          onChange={this.selectOption}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterBySelect().map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  classNames('TodoList__item',\n                    {\n                      'TodoList__item--checked': todo.completed,\n                      'TodoList__item--unchecked': !todo.completed,\n                    })\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => updatedUserId(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n\n            <li className=\"TodoList__item TodoList__item--checked\">\n              <label>\n                <input type=\"checkbox\" checked readOnly />\n                <p>distinctio vitae autem nihil ut molestias quo</p>\n              </label>\n\n              <button\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n              >\n                User&nbsp;#2\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(Error)\n    ));\n};\n\nexport const getUsers = (id: number) => {\n  return fetch(`${API_URL}/users/${id}`)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(Error)\n    ));\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\ninterface Props {\n  selectedUserId: number;\n  resetUserId: () => void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.updateUser();\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.updateUser();\n    }\n  }\n\n  updateUser = async () => {\n    const user = await getUsers(this.props.selectedUserId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { selectedUserId } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>\n          User not found\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {'Selected user: '}\n            {selectedUserId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n\n        <button\n          type=\"button\"\n          onClick={this.props.resetUserId}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  errorMessage: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    errorMessage: '',\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch (error) {\n      this.setState({ errorMessage: 'Error' });\n    }\n  }\n\n  updatedUserId = (id: number) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  };\n\n  resetUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      todos,\n      errorMessage,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage ? (\n            <TodoList\n              todos={todos}\n              updatedUserId={this.updatedUserId}\n            />\n          ) : (\n            { errorMessage }\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                resetUserId={this.resetUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}